exports.ids = [0];
exports.modules = {

/***/ "./node_modules/impress.js/src/plugins/media/media.js":
/*!************************************************************!*\
  !*** ./node_modules/impress.js/src/plugins/media/media.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Media Plugin\n *\n * This plugin will do the following things:\n *\n *  - Add a special class when playing (body.impress-media-video-playing\n *    and body.impress-media-video-playing) and pausing media (body.impress-media-video-paused\n *    and body.impress-media-audio-paused) (removing them when ending).\n *    This can be useful for example for darkening the background or fading out other elements\n *    while a video is playing.\n *    Only media at the current step are taken into account. All classes are removed when leaving\n *    a step.\n *\n *  - Introduce the following new data attributes:\n *\n *    - data-media-autoplay=\"true\": Autostart media when entering its step.\n *    - data-media-autostop=\"true\": Stop media (= pause and reset to start), when leaving its\n *      step.\n *    - data-media-autopause=\"true\": Pause media but keep current time when leaving its step.\n *\n *    When these attributes are added to a step they are inherited by all media on this step.\n *    Of course this setting can be overwritten by adding different attributes to inidvidual\n *    media.\n *\n *    The same rule applies when this attributes is added to the root element. Settings can be\n *    overwritten for individual steps and media.\n *\n *    Examples:\n *    - data-media-autoplay=\"true\" data-media-autostop=\"true\": start media on enter, stop on\n *      leave, restart from beginning when re-entering the step.\n *\n *    - data-media-autoplay=\"true\" data-media-autopause=\"true\": start media on enter, pause on\n *      leave, resume on re-enter\n *\n *    - data-media-autoplay=\"true\" data-media-autostop=\"true\" data-media-autopause=\"true\": start\n *      media on enter, stop on leave (stop overwrites pause).\n *\n *    - data-media-autoplay=\"true\" data-media-autopause=\"false\": let media start automatically\n *      when entering a step and let it play when leaving the step.\n *\n *    - <div id=\"impress\" data-media-autoplay=\"true\"> ... <div class=\"step\"\n *      data-media-autoplay=\"false\">\n *      All media is startet automatically on all steps except the one that has the\n *      data-media-autoplay=\"false\" attribute.\n *\n *  - Pro tip: Use <audio onended=\"impress().next()\"> or <video onended=\"impress().next()\"> to\n *    proceed to the next step automatically, when the end of the media is reached.\n *\n *\n * Copyright 2018 Holger Teichert (@complanar)\n * Released under the MIT license.\n */\n/* global window, document */\n\n( function( document, window ) {\n    \"use strict\";\n    var root, api, gc, attributeTracker;\n\n    attributeTracker = [];\n\n    // Function names\n    var enhanceMediaNodes,\n        enhanceMedia,\n        removeMediaClasses,\n        onStepenterDetectImpressConsole,\n        onStepenter,\n        onStepleave,\n        onPlay,\n        onPause,\n        onEnded,\n        getMediaAttribute,\n        teardown;\n\n    document.addEventListener( \"impress:init\", function( event ) {\n        root = event.target;\n        api = event.detail.api;\n        gc = api.lib.gc;\n\n        enhanceMedia();\n\n        gc.pushCallback( teardown );\n    }, false );\n\n    teardown = function() {\n        var el, i;\n        removeMediaClasses();\n        for ( i = 0; i < attributeTracker.length; i += 1 ) {\n            el = attributeTracker[ i ];\n            el.node.removeAttribute( el.attr );\n        }\n        attributeTracker = [];\n    };\n\n    getMediaAttribute = function( attributeName, nodes ) {\n        var attrName, attrValue, i, node;\n        attrName = \"data-media-\" + attributeName;\n\n        // Look for attributes in all nodes\n        for ( i = 0; i < nodes.length; i += 1 ) {\n            node = nodes[ i ];\n\n            // First test, if the attribute exists, because some browsers may return\n            // an empty string for non-existing attributes - specs are not clear at that point\n            if ( node.hasAttribute( attrName ) ) {\n\n                // Attribute found, return their parsed boolean value, empty strings count as true\n                // to enable empty value booleans (common in html5 but not allowed in well formed\n                // xml).\n                attrValue = node.getAttribute( attrName );\n                if ( attrValue === \"\" || attrValue === \"true\" ) {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n\n            // No attribute found at current node, proceed with next round\n        }\n\n        // Last resort: no attribute found - return undefined to distiguish from false\n        return undefined;\n    };\n\n    onPlay = function( event ) {\n        var type = event.target.nodeName.toLowerCase();\n        document.body.classList.add( \"impress-media-\" + type + \"-playing\" );\n        document.body.classList.remove( \"impress-media-\" + type + \"-paused\" );\n    };\n\n    onPause = function( event ) {\n        var type = event.target.nodeName.toLowerCase();\n        document.body.classList.add( \"impress-media-\" + type + \"-paused\" );\n        document.body.classList.remove( \"impress-media-\" + type + \"-playing\" );\n    };\n\n    onEnded = function( event ) {\n        var type = event.target.nodeName.toLowerCase();\n        document.body.classList.remove( \"impress-media-\" + type + \"-playing\" );\n        document.body.classList.remove( \"impress-media-\" + type + \"-paused\" );\n    };\n\n    removeMediaClasses = function() {\n        var type, types;\n        types = [ \"video\", \"audio\" ];\n        for ( type in types ) {\n            document.body.classList.remove( \"impress-media-\" + types[ type ] + \"-playing\" );\n            document.body.classList.remove( \"impress-media-\" + types[ type ] + \"-paused\" );\n        }\n    };\n\n    enhanceMediaNodes = function() {\n        var i, id, media, mediaElement, type;\n\n        media = root.querySelectorAll( \"audio, video\" );\n        for ( i = 0; i < media.length; i += 1 ) {\n            type = media[ i ].nodeName.toLowerCase();\n\n            // Set an id to identify each media node - used e.g. for cross references by\n            // the consoleMedia plugin\n            mediaElement = media[ i ];\n            id = mediaElement.getAttribute( \"id\" );\n            if ( id === undefined || id === null ) {\n                mediaElement.setAttribute( \"id\", \"media-\" + type + \"-\" + i );\n                attributeTracker.push( { \"node\": mediaElement, \"attr\": \"id\" } );\n            }\n            gc.addEventListener( mediaElement, \"play\", onPlay );\n            gc.addEventListener( mediaElement, \"playing\", onPlay );\n            gc.addEventListener( mediaElement, \"pause\", onPause );\n            gc.addEventListener( mediaElement, \"ended\", onEnded );\n        }\n    };\n\n    enhanceMedia = function() {\n        var steps, stepElement, i;\n        enhanceMediaNodes();\n        steps = document.getElementsByClassName( \"step\" );\n        for ( i = 0; i < steps.length; i += 1 ) {\n            stepElement = steps[ i ];\n\n            gc.addEventListener( stepElement, \"impress:stepenter\", onStepenter );\n            gc.addEventListener( stepElement, \"impress:stepleave\", onStepleave );\n        }\n    };\n\n    onStepenterDetectImpressConsole = function() {\n        return {\n            \"preview\": ( window.frameElement !== null && window.frameElement.id === \"preView\" ),\n            \"slideView\": ( window.frameElement !== null && window.frameElement.id === \"slideView\" )\n        };\n    };\n\n    onStepenter = function( event ) {\n        var stepElement, media, mediaElement, i, onConsole, autoplay;\n        if ( ( !event ) || ( !event.target ) ) {\n            return;\n        }\n\n        stepElement = event.target;\n        removeMediaClasses();\n\n        media = stepElement.querySelectorAll( \"audio, video\" );\n        for ( i = 0; i < media.length; i += 1 ) {\n            mediaElement = media[ i ];\n\n            // Autoplay when (maybe inherited) autoplay setting is true,\n            // but only if not on preview of the next step in impressConsole\n            onConsole = onStepenterDetectImpressConsole();\n            autoplay = getMediaAttribute( \"autoplay\", [ mediaElement, stepElement, root ] );\n            if ( autoplay && !onConsole.preview ) {\n                if ( onConsole.slideView ) {\n                    mediaElement.muted = true;\n                }\n                mediaElement.play();\n            }\n        }\n    };\n\n    onStepleave = function( event ) {\n        var stepElement, media, i, mediaElement, autoplay, autopause, autostop;\n        if ( ( !event || !event.target ) ) {\n            return;\n        }\n\n        stepElement = event.target;\n        media = event.target.querySelectorAll( \"audio, video\" );\n        for ( i = 0; i < media.length; i += 1 ) {\n            mediaElement = media[ i ];\n\n            autoplay = getMediaAttribute( \"autoplay\", [ mediaElement, stepElement, root ] );\n            autopause = getMediaAttribute( \"autopause\", [ mediaElement, stepElement, root ] );\n            autostop = getMediaAttribute( \"autostop\",  [ mediaElement, stepElement, root ] );\n\n            // If both autostop and autopause are undefined, set it to the value of autoplay\n            if ( autostop === undefined && autopause === undefined ) {\n                autostop = autoplay;\n            }\n\n            if ( autopause || autostop ) {\n                mediaElement.pause();\n                if ( autostop ) {\n                    mediaElement.currentTime = 0;\n                }\n            }\n        }\n        removeMediaClasses();\n    };\n\n} )( document, window );\n\n\n//# sourceURL=webpack:///./node_modules/impress.js/src/plugins/media/media.js?");

/***/ })

};;